$grid-columns: 12;
$grid-gutter: 2rem;

$grid-breakpoints: (
    xs: false,
    sm: 761px,
    md: 1025px,
    lg: 1200px,
    xl: 1400px
);

$grid-containers: (
    xs: false,
    sm: 420px,
    md: 568px,
    lg: 700px,
    xl: 900px
);

// Mixins
@mixin grid-breakpoints($breakpoint, $breakpoint-size) {
    // The grid is mobile first so xs is the default, hence no breakpoint
    @if $breakpoint == xs {
        @content;
    } @else {
        // Add breakpoints for larger screens
        @media only screen and (min-width: $breakpoint-size) {
            // Static grid
            .ngel-grid {
                width: map-get($grid-containers, $breakpoint);
            }

            @content;
        }
    }
}

// Rows
.ngel-grid__row {
    box-sizing: border-box;
    display: flex;
    flex: 0 1 auto;
    flex-flow: row wrap;
    margin-right: ($grid-gutter / -4);
    margin-left: ($grid-gutter / -4);

    &--reverse { flex-direction: row-reverse; }
    &--padded { padding: $baseline-increment 0; }
}

// Columns
.ngel-grid__col {
    &--reverse {
        flex-flow: column-reverse;
    }
}

@each $breakpoint, $breakpoint-size in $grid-breakpoints {
    @include grid-breakpoints($breakpoint, $breakpoint-size) {
        $col-selectors: ('.ngel-grid__col--#{$breakpoint}');

        @for $col from 1 through $grid-columns {
            $col-selector: unquote('.ngel-grid__col--#{$breakpoint}-#{$col}');
            $col-selectors: append($col-selectors, $col-selector, comma);
        }

        @for $col from 1 through $grid-columns {
            $col-offset-selector: unquote('.ngel-grid__col--#{$breakpoint}-offset-#{$col}');
            $col-selectors: append($col-selectors, $col-offset-selector, comma);
        }

        #{$col-selectors} {
            box-sizing: border-box;
            flex: 0 0 auto;
            padding-right: ($grid-gutter / 4);
            padding-left: ($grid-gutter / 4);
        }

        .ngel-grid__col {
            &--#{$breakpoint} {
                flex-grow: 1;
                flex-basis: 0;
                max-width: 100%;
                @for $col from 1 through $grid-columns {
                    &-#{$col} {
                        flex-basis: (100% / $grid-columns) * $col;
                        max-width: (100% / $grid-columns) * $col;
                    }
                }

                @for $col from 1 through $grid-columns {
                    &-offset-#{$col} {
                        margin-left: (100% / $grid-columns) * $col;
                    }
                }
            }
        }

        // Utilities
        .ngel-grid {
            &__row {
                &--#{$breakpoint}-start {
                    justify-content: flex-start;
                    text-align: start;
                }

                &--#{$breakpoint}-center {
                    justify-content: center;
                    text-align: center;
                }

                &--#{$breakpoint}-end {
                    justify-content: flex-end;
                    text-align: end;
                }

                &--#{$breakpoint}-top {
                    align-items: flex-start;
                }

                &--#{$breakpoint}-middle {
                    align-items: center;
                }

                &--#{$breakpoint}-bottom {
                    align-items: flex-end;
                }

                &--#{$breakpoint}-around {
                    justify-content: space-around;
                }

                &--#{$breakpoint}-between {
                    justify-content: space-between;
                }
            }

            &__col {
                &--#{$breakpoint}-first { order: -1;}

                &--#{$breakpoint}-last { order: 1; }
            }
        }
    }
}

@import 'breakpoints';
@import 'media-queries';

.ngel-grid--center { margin: 0 auto; }

.ngel-grid--fluid {
    padding-right: $grid-gutter;
    padding-left: $grid-gutter;
    width: calc(100% - #{$grid-gutter});
}

.ngel-grid--fluid-hugged {
    padding-right: 0;
    padding-left: 0;
    width: 100%;
}
